using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV.Face;
using System.Media;
using System.ComponentModel;

namespace cazzoneso
{
    public partial class Form1 : Form
    {
        private VideoCapture _capture;
        private LBPHFaceRecognizer _recognizer;
        private CascadeClassifier _faceCascade;
        private bool _isModelTrained = false;
        private BackgroundWorker backgroundWorker1;

        public Form1()
        {
            InitializeComponent();
            _capture = new VideoCapture(0, VideoCapture.API.Msmf); // Cambia 0 con l'indice della tua videocamera
            _recognizer = new LBPHFaceRecognizer(1, 8, 8, 8, 100); // Parametri ottimizzati per una maggiore precisione

            string faceCascadePath = "C:\\Users\\Jimmy\\Desktop\\VSProjects\\Progetti_2023\\Modelli\\Set_Jimmy\\haarcascade_frontalface_default.xml";
            if (File.Exists(faceCascadePath))
            {
                _faceCascade = new CascadeClassifier(faceCascadePath);
                Console.WriteLine($"Face cascade file found: {faceCascadePath}");
            }
            else
            {
                Console.WriteLine($"Face cascade file not found: {faceCascadePath}");
            }

            // Inizializza il BackgroundWorker
            backgroundWorker1 = new BackgroundWorker();
            backgroundWorker1.DoWork += new System.ComponentModel.DoWorkEventHandler(backgroundWorker1_DoWork);
            backgroundWorker1.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(backgroundWorker1_RunWorkerCompleted);

            btnTrain.Click += new EventHandler(btnTrain_Click);
        }

        private void ProcessFrame(object sender, EventArgs e)
        {
            using (Mat frame = _capture.QueryFrame())
            {
                if (frame == null || frame.IsEmpty)
                {
                    Console.WriteLine("Errore: Frame non disponibile.");
                    UpdateLabel("Errore: Frame non disponibile.");
                    return;
                }

                Mat grayFrame = new Mat();
                CvInvoke.CvtColor(frame, grayFrame, ColorConversion.Bgr2Gray);

                if (grayFrame == null || grayFrame.IsEmpty)
                {
                    Console.WriteLine("Errore: Immagine in scala di grigi vuota.");
                    return;
                }

                if (_faceCascade == null)
                {
                    Console.WriteLine("Errore: Classificatore dei volti non caricato correttamente.");
                    UpdateLabel("Errore: Classificatore non caricato.");
                    return;
                }

                try
                {
                    Rectangle[] faces = _faceCascade.DetectMultiScale(grayFrame, 1.1, 10, Size.Empty);

                    foreach (Rectangle face in faces)
                    {
                        Mat faceRegion = new Mat(grayFrame, face);

                        if (_isModelTrained)
                        {
                            var result = _recognizer.Predict(faceRegion);
                            Console.WriteLine($"Label: {result.Label}, Distance: {result.Distance}");

                            string label;
                            Bgr color;

                            if (result.Distance < 80) // Soglia più bassa per una maggiore confidenza
                            {
                                label = "Recognized";
                                color = new Bgr(Color.Green);
                                //SystemSounds.Beep.Play();
                            }
                            else if (result.Distance < 200)
                            {
                                label = "Unknown"; // O un'etichetta intermedia
                                color = new Bgr(Color.Yellow);
                            }
                            else
                            {
                                label = "Not Recognized";
                                color = new Bgr(Color.Red);
                            }

                            CvInvoke.Rectangle(frame, new Rectangle(face.X, face.Y - 30, face.Width, 30), new MCvScalar(0, 0, 0), -1);
                            CvInvoke.PutText(frame, label, new Point(face.X, face.Y - 10), FontFace.HersheySimplex, 1.5, color.MCvScalar, 3);
                            CvInvoke.Rectangle(frame, face, color.MCvScalar, 2);

                            UpdateLabel(label);
                        }
                        else
                        {
                            Console.WriteLine("Il modello non è stato allenato.");
                            UpdateLabel("Modello non allenato.");
                        }
                    }
                }
                catch (Emgu.CV.Util.CvException ex)
                {
                    Console.WriteLine($"Errore durante la rilevazione dei volti: {ex.Message}");
                    UpdateLabel("Errore di rilevazione volti.");
                }

                pictureBox1.Image = ConvertMatToBitmap(frame);
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Application.Idle += ProcessFrame;
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            _capture.Dispose();
        }

        private Bitmap ConvertMatToBitmap(Mat mat)
        {
            Bitmap bitmap = new Bitmap(mat.Width, mat.Height, PixelFormat.Format24bppRgb);
            BitmapData data = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.WriteOnly, bitmap.PixelFormat);
            byte[] bytes = new byte[mat.Width * mat.Height * 3];
            Marshal.Copy(mat.DataPointer, bytes, 0, bytes.Length);
            Marshal.Copy(bytes, 0, data.Scan0, bytes.Length);
            bitmap.UnlockBits(data);
            return bitmap;
        }

        private void UpdateLabel(string text)
        {
            if (label2.InvokeRequired)
            {
                label2.Invoke(new Action(() => label2.Text = text));
            }
            else
            {
                label2.Text = text;
            }
        }

        public void TrainRecognizer()
        {
            Console.WriteLine("TrainRecognizer method called.");
            string csvPath = "C:\\Users\\Jimmy\\Desktop\\VSProjects\\Progetti_2023\\Modelli\\Set_Jimmy\\dataset.csv";
            List<Mat> trainingImages = new List<Mat>();
            List<int> labels = new List<int>();

            Console.WriteLine("Opening CSV file...");

            if (!File.Exists(csvPath))
            {
                Console.WriteLine($"CSV file not found: {csvPath}");
                return;
            }

            using (var reader = new StreamReader(csvPath))
            {
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    Console.WriteLine($"Reading line: {line}");
                    var values = line.Split(',');

                    if (values.Length == 2 && int.TryParse(values[1], out int label))
                    {
                        string imagePath = values[0];

                        if (File.Exists(imagePath))
                        {
                            Console.WriteLine($"Loading image: {imagePath}");
                            Mat trainingImage = CvInvoke.Imread(imagePath, ImreadModes.Grayscale);
                            trainingImages.Add(trainingImage);
                            labels.Add(label);
                            Console.WriteLine($"Loaded image: {imagePath} with label: {label}");
                        }
                        else
                        {
                            Console.WriteLine($"File not found: {imagePath}");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Invalid line format: {line}");
                    }
                }
            }

            if (trainingImages.Count > 0 && labels.Count > 0)
            {
                Console.WriteLine("Training the recognizer...");
                _recognizer.Train(trainingImages.ToArray(), labels.ToArray());

                Console.WriteLine("Saving the trained model...");
                _recognizer.Write("C:\\Users\\Jimmy\\Desktop\\VSProjects\\Progetti_2023\\Modelli\\Set_Jimmy\\face_recognizer_model.xml");

                _isModelTrained = true;
                Console.WriteLine("Model trained successfully.");
            }
            else
            {
                Console.WriteLine("No training data found.");
                _isModelTrained = false;
            }

            // Aggiorna la label con lo stato del modello
            if (_isModelTrained)
            {
                UpdateLabel("Model trained successfully.");
            }
            else
            {
                UpdateLabel("Model not trained.");
            }
        }

        private void backgroundWorker1_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            TrainRecognizer();
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            Console.WriteLine("Training completed.");
        }

        private void btnTrain_Click(object sender, EventArgs e)
        {
            Console.WriteLine("btnTrain_Click called.");
            if (!backgroundWorker1.IsBusy)
            {
                backgroundWorker1.RunWorkerAsync();
            }
            else
            {
                Console.WriteLine("BackgroundWorker is busy.");
            }
        }
    }
}
